import requests
import base64
import git
import uuid
from pathlib import Path

import settings
import utils

def create_repo(session, initializeReadme=True):
    return utils.generic_post_json(session, '/api/repo/create', {"name": settings.repo_name, "initializeReadme": initializeReadme})

def create_webhook(session, path, content_type, body, raw=False):
    if not raw:
        data = base64.b64encode(body.encode("ascii")).decode("ascii")
    else:
        data = body
    return utils.generic_post_json(session, f'/{settings.username}/{settings.repo_name}.git/webhooks', {'url': f'{settings.redirect_url}{path}', 'contentType': content_type, 'body': data})

def get_webhooks(session):
    resp = utils.generic_get(session, f'/{settings.username}/{settings.repo_name}.git/webhooks')
    return resp.json()

def delete_webhook(session, webhook_id):
    utils.generic_delete_json(session, f'/{settings.username}/{settings.repo_name}.git/webhooks', {'uid': webhook_id})
    return session

def delete_webhooks_all(session):
    webhooks = get_webhooks(session)
    for i in webhooks:
        session = delete_webhook(session, i['uid'])
    return session

def init_repo_local():
    git.Repo.clone_from(f'{settings.url_auth}/{settings.username}/{settings.repo_name}.git', settings.repo_dir)

def push_commit():
    repo = git.Repo(settings.repo_dir)
    file_name = uuid.uuid4().hex
    Path(f'{settings.repo_dir}/{file_name}').touch()
    index = repo.index
    index.add([file_name])
    author = git.Actor(settings.username, "author@example.com")
    committer = git.Actor(settings.username, "author@example.com")
    index.commit(file_name, author=author, committer=committer)
    origin = repo.remotes.origin
    origin.push()
